okay I'm going to do a quick video to show you how to synchronize uh your local repo and GitHub repo um with the original class repo um to make sure you have all the updated files uh for the course all right so first things first this is just a forked repo from uh you know an original uh REO REO called machine learning for beginners all right it was from uh Microsoft class that I had looked at a long time ago um but obviously I'm really far behind so I'm 65 commits behind the original all right so that's a problem so I got to get those additional files down into my GitHub uh forked repo and then also to my local all right but let me let me pull this up so I not only did I fork it but I also made it in my um also cloned it right into a local file so this is what it looks like locally okay I made like this change I'm just going to and that that was the Commit This three little dots but I'm going to add two more and save this okay and then what you'll see is I have right I'm committing which you guys probably have been so I'm going to commit and push all right and that's you know I'm going to pop up a little message test one all right yes I'll save and that'll push back up to our remote so so if I update this all right it will show eventually wait for it all right that I am two commits behind Okay so every time we add another commit it'll show that we're uh you know two commits behind for you know my commits from my local uh cloned repo into the GitHub Fort version of it all right but what we can do and we can do these in the command Lin as well but I'm just going to show you this version of it EAS to just to get everybody up and running so they have kind of these gooey interfaces here and what you'll see is that this will give you this will say this branch is out of date which will probably what you'll see on your forked repo right and so it'll say Hey you can dis disregard these two commits but you don't have to do that all right you can just say update this Branch all right so let's do that so we're just going to say update this branch and that should pull these 65 in to my new space all right so let's say update the branch all right and we just have to give it give it a little bit of time here to kind of synchronizing this that is a lot that got put in there okay so now it says it's three commits ahead and that's it's three commits ahead because I have added additional content into this repo that isn't in my basically in my um in my local so we got got a it it adds it as a commit essentially all of those additional content so if we go back here to our local file right let me kind of update this in theory uh what should happen right is that all of the additional stuff that was just added into our repo actually isn't here yet so we do have to get pull all right so you can go into the menu again you can do this you can do it from the um done from the terminal as well all right and so this is going to pull down all the latest information that we just put into our repo see it's merging all of this information here into our local file okay and then and then we'll have all the additional content okay in our local folder okay and so this allows us to get up to speed real quick uh and then we can go back right we can go back here and we say if we wanted to click on this again it'll say this branch is not behind the Upstream which is what you want so what I would recommend is that you do this kind of all the time you know at least on a weekly basis because I am going to be updating uh the files quite a bit all right if you have merge conflicts or there's something wrong with that that we'll get it all worked out there's more robust ways to do this um you can always rebaseline things like that all right so if you go to this remote or if you go to Branch right you can always rebase the branch and it'll give you the option from the Upstream original to rebase and that'll just pull down all the new content and kind of add it into your file too so there's there's more robust ways to do it but this is a lightweight way to do it and it should be um should be able to do that for for most people because I don't know that you've been committing a ton of code yet in the class okay now I mean you can also choose to if you want to ignore those commits if you want to do that it doesn't affect your local files things like that but this is just an easy way to get you up and running um make sure you're synchronized with the class so just use that sync Fork option and that's it okay thanks